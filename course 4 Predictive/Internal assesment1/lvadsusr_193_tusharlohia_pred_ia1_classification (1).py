# -*- coding: utf-8 -*-
"""LVADSUSR_193_tusharlohia_pred_IA1_CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V5KyXCy0vDyqG0EEo0EHqUu_BteI8olt
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score

book_data = pd.read_csv("/content/booking.csv")
book_data.info()
book_data.head()
book_data.describe()

"""1) handling missing values and outliers"""

nulls = book_data.isnull().sum()
print(nulls)

book_data = book_data[(book_data['average price'] < 200) & (book_data['lead time'] < 300)]
sns.boxplot(data=book_data, x="average price")
sns.boxplot(data=book_data, x="lead time")

book_data.info()

"""2) Encoding the categorical Data"""

lbl_enc = LabelEncoder()
book_data['type of meal'] = lbl_enc.fit_transform(book_data['type of meal'])
book_data['room type'] = lbl_enc.fit_transform(book_data['room type'])
book_data['market segment type'] = lbl_enc.fit_transform(book_data['market segment type'])
book_data['booking status'] = lbl_enc.fit_transform(book_data['booking status'])

book_data.head()

"""3)Data cleaning and Feature selection"""

plt.scatter(book_data['number of adults'],book_data['average price'])
plt.scatter(book_data['number of children'],book_data['average price'])
plt.scatter(book_data['number of weekend nights'],book_data['average price'])
plt.scatter(book_data['number of week nights'],book_data['average price'])


book_data = book_data.drop(columns=['date of reservation','Booking_ID'],axis=1)
duplicates = book_data.duplicated(keep=False)
book_data['dup_bool'] = duplicates
book_data[book_data['dup_bool'] == True].count()

book_data = book_data[book_data['dup_bool'] == False]
book_data = book_data.drop('dup_bool',axis=1)
book_data.count()

"""4) Data splitting"""

X = book_data.drop('booking status',axis=1)
y = book_data['booking status']
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=30)

"""5) Model development"""

regressor = LogisticRegression(random_state=0,max_iter=10000)
trained_model = regressor.fit(X_train,y_train)
y_pred = trained_model.predict(X_test)

"""6) Evaluation"""

accuracy = accuracy_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)

print('Accuracy score: ',(accuracy*100),'%')
print('Precision score: ',(precision*100),'%')
print('Recall score: ',(recall*100))