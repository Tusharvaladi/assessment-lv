# -*- coding: utf-8 -*-
"""LVADSUSR_193_tusharlohia_pred_IA1_LINEAR_REGRESSION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r4fnrUFFvB-w6tpoIbVTeB9CQCCz97bt
"""

import pandas as pd
import seaborn as sns
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression

ex_data = pd.read_csv("/content/expenses.csv")
ex_data.info()
ex_data.describe()

"""1) handling missing values and outliers"""

nulls = ex_data.isnull().sum()
print(nulls)


bmi_outliers = sns.boxplot(ex_data['bmi'])
age_outliers = sns.boxplot(ex_data['age'])
children_outliers = sns.boxplot(ex_data['children'])
charges_outliers = sns.boxplot(ex_data['charges'])

print(ex_data[ex_data['charges']>40000].count())


def remove_outliers(A, threshold):
  return ex_data[A<threshold]

ex_data = remove_outliers(ex_data['charges'],40000)
ex_data = remove_outliers(ex_data['bmi'],45)
ex_data.count()

ex_data.info()

"""2) Encoding the categorical Data"""

lbl_enc = LabelEncoder()
ex_data['sex'] = lbl_enc.fit_transform(ex_data['sex'])
ex_data['smoker'] = lbl_enc.fit_transform(ex_data['smoker'])
ex_data['region'] = lbl_enc.fit_transform(ex_data['region'])

ex_data.head()

"""3)Data cleaning and Feature selection"""

duplicates = ex_data.duplicated(keep=False)
ex_data['dup_bool'] = duplicates
ex_data[ex_data['dup_bool'] == True].count()

ex_data = ex_data[ex_data['dup_bool'] == False]
ex_data = ex_data.drop('dup_bool',axis=1)

sns.pairplot(ex_data)

"""4) Data splitting"""

# in above plots, we can see that age, region and number of children have impact on insurance cost

X = ex_data.drop('charges',axis=1)
y = ex_data['charges']
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=30)

"""5)Model Training"""

regressor = LinearRegression()
trained_model = regressor.fit(X_train,y_train)
y_pred = trained_model.predict(X_test)

"""6) Model evaluation"""

mse = mean_squared_error(y_test,y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test,y_pred)

print('MSE: ',mse)
print('RMSE: ',rmse)
print('R-Squared: ',r2)